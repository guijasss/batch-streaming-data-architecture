version: '3'

services:
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql
    hostname: mssql
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: adiosplofe12@@
    ports:
      - "1433:1433"
    restart: unless-stopped
    volumes:
      - mssql_data:/var/opt/mssql
    networks:
      - pipeline-net
    profiles:
      - batch
      - streaming

  minio:
    image: bitnami/minio:latest
    hostname: minio
    container_name: minio
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=adiosplofe12@@
    volumes:
      - minio:/bitnami/minio/data
    networks:
      - pipeline-net
    profiles:
      - batch

  # trino:
  #   image: trinodb/trino:latest
  #   container_name: trino
  #   hostname: trino
  #   environment:
  #     - TRINO_ENVIRONMENT=dev
  #   volumes:
  #     - ./etc/catalog/hive.properties:/etc/trino/catalog/hive.properties
  #     - ./jars/hadoop-aws-3.3.6.jar:/usr/lib/trino/lib/hadoop-aws-3.3.6.jar
  #     - ./jars/hadoop-common-3.3.6.jar:/usr/lib/trino/lib/hadoop-common-3.3.6.jar
  #   ports:
  #     - 8080:8080
  #   networks:
  #     - mssql
  #   depends_on:
  #     - metastore

  # metastore:
  #   image: apache/hive:3.1.3
  #   container_name: metastore
  #   hostname: hive
  #   ports:
  #     - 9083:9083
  #   environment:
  #     - SERVICE_NAME=metastore
  #   networks:
  #     - mssql
  #   volumes:
  #     - ./config/hive-site.xml:/opt/hive/conf/hive-site.xml
  #     - ./jars/hadoop-aws-3.1.3.jar:/opt/hive/lib/hadoop-aws-3.1.3.jar
  #     - ./jars/hadoop-client-3.1.3.jar:/opt/hive/lib/hadoop-client-3.1.3.jar
  #     - ./jars/hadoop-common-3.3.6.jar:/opt/hive/lib/hadoop-common-3.3.6.jar
  #     - ./jars/guava-31.1-jre.jar:/opt/hive/lib/guava-31.1-jre.jar

  metabase:
    image: metabase/metabase
    container_name: metabase
    ports: 
      - 3000:3000

  kafka:
    image: confluentinc/cp-kafka:7.2.2
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: LISTENER_1://kafka:29092,LISTENER_2://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_1://kafka:29092,LISTENER_2://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_1:PLAINTEXT,LISTENER_2:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_DELETE_TOPIC_ENABLE: "true"

  zookeeper:
    container_name: zookeeper
    image: zookeeper:3.5.10
    ports:
      - 2181:2181
    environment:
      - ZOO_MY_ID=1

  postgres:
    container_name: postgres
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - metadata_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=FoolishPassword
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid

  coordinator:
    image: apache/druid:29.0.0
    container_name: coordinator
    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
    ports:
      - "8081:8081"
    command:
      - coordinator
    env_file:
      - environment

  broker:
    image: apache/druid:29.0.0
    container_name: broker
    volumes:
      - broker_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    env_file:
      - environment

  historical:
    image: apache/druid:29.0.0
    container_name: historical
    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical
    env_file:
      - environment

  middlemanager:
    image: apache/druid:29.0.0
    container_name: middlemanager
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    command:
      - middleManager
    env_file:
      - environment

  router:
    image: apache/druid:29.0.0
    container_name: router
    volumes:
      - router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - environment
    
  demo-script:
    container_name: demo-script
    build: source-app/
    command: ["tail", "-f", "/dev/null"]
    networks:
      - pipeline-net
    volumes:
      - ./source-app/insert_data.py:/home/app/insert_data.py
    profiles:
      - batch

volumes:
  mssql_data:
    driver: local
  minio:
    driver: local
  kafka-connect:
    driver: local
  metadata_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  druid_shared: {}

networks:
  pipeline-net:
    driver: bridge
